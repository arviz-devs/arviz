# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
- master


jobs: 
- job: build
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python_36_Unit_Test:
        PYTHON_VERSION: 3.6
        PYSTAN_VERSION: "latest"
        PYRO_VERSION: "latest"
        EMCEE_VERSION: 2
        NAME: "UNIT"
      Python_36_Unit_Test_PyStan_3_Pyro_0.2.1_Emcee_3:
        PYTHON_VERSION: 3.6
        PYSTAN_VERSION: "preview"
        PYRO_VERSION: 0.2.1
        EMCEE_VERSION: 3
        NAME: "UNIT"
      Python_35_Unit_Test:
        PYTHON_VERSION: 3.5
        PYSTAN_VERSION: "latest"
        PYRO_VERSION: "latest"
        EMCEE_VERSION: 2
        NAME: "UNIT"
      Python_36_Lint:
        PYTHON_VERSION: 3.6
        PYSTAN_VERSION: "latest"
        PYRO_VERSION: "latest"
        EMCEE_VERSION: 2
        NAME: "LINT"

  steps:
  - script: |
      docker pull conda/miniconda3
      docker --version
    displayName: 'Pull Docker Image'

  - script: |
      # Build docker image
      . ./scripts/container.sh --build

      # Print conda details
      docker run --rm arviz:latest bash -c "conda info -a"

      # Print conda environment details
      docker run --rm arviz:latest bash -c "conda list && pip freeze"
    displayName: 'Build Docker Container'

  - script: |
      if [[ $NAME == UNIT ]]; 
      then docker run -t  --mount type=bind,source="$(pwd)",target=/opt/arviz --name arviz_test arviz:latest bash -c \
      "NUMBA_DISABLE_JIT=1 pytest -v arviz/tests/ --cov=arviz/";
        fi
    displayName: 'Test ArviZ'
    
  - script: |
      if [[ $NAME == LINT ]]; 
      then docker run arviz:latest bash -c "./scripts/lint.sh";
        fi
        
     # Tests saving plots and deleting files
      if [[ $NAME == LINT ]]; 
      then docker run  --mount type=bind,source="$(pwd)",target=/opt/arviz --name arviz_test arviz:latest bash -c \
      "mkdir -p test_images/new_folder && pytest -v arviz/tests/ --save -k plot_khat --cov=arviz/";
        fi
    displayName: 'Lint ArviZ'

  - script: |
      echo Add other tasks to build, test, and deploy your project.
      echo See https://aka.ms/yaml
    displayName: 'Run a multi-line script'
